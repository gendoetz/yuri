// Cluster Configuration

// MySQL Database Credentials
sql_ip: 127.0.0.1
sql_port: 3306
sql_id: tk
sql_pw: tk
sql_db: tk

// Login Auth Token (IMPORTANT)
// Used to establish an authenticated internal connection between the login server and character server.
//
// !!! IMPORTANT !!!
// These must be changed to a secret value (max length of 32 characters) and never publically shared, as they allow
// access to change character passwords. DO NOT USE THE DEFAULT VALUES, THEY ARE INSECURE.
login_id: 2d8ae0cc4ef940848d885e2493cd8d8a
login_pw: d6ed86ed53a749639b215436916c8c1e

// Char Auth Token (IMPORTANT)
// Used to establish an authenticated internal connection between the map server and character server.
//
// !!! IMPORTANT !!!
// These must be changed to a secret value (max length of 32 characters) and never publically shared, as they allow
// access to change character data. DO NOT USE THE DEFAULT VALUES, THEY ARE INSECURE.
char_id: 34d6adef1e3e4ba69f756247a58a8878
char_pw: d3adfd7f9e714bb7af2d4c8b613d2104

// Client <-> Server Encryption Key
xor_key: Urk#nI7ni

// Character Server Configuration

// Char Server Address
// Connection information for char server, which is used for cross-talk between the char/map servers.
// This is also what the char server uses to determine its listen port. Currently, the char server will always
// bind to 0.0.0.0, so this is just for external clients to know where it is.
char_ip: 192.168.1.68
char_port: 2005


// Character starting position
// start_point: MAP_ID, X_POS, Y_POS
// Newly created characters will start here, but may be warped away on login (i.e, for a tutorial quest)
start_point: 0, 1, 1

// Login Server Configuration

// Login Server Address
// Connection information for login server, which is used for cross-talk between the char/login servers.
// This is also what the login server uses to determine its listen port. Currently, the login server will always
// bind to 0.0.0.0, so this is just for external clients to know where it is.
login_ip: 192.168.1.68
login_port: 2000

// Required client version
// Upon connecting, the client tells us the version that it is running. If the client version does not match
// this value, the server will initiate the patching process which currently fails.
version: 750

// Required client patch (currently unenforced)
// Not exactly sure what this is, but it comes with the version and I think it is the client patch version. In
// testing it has always been 0.
// TODO: Rename to something more descriptive
deep: 0

// Require account registration
// Whether or not to require account registration through a website before allowing a player to login
// after creating their character. If this is set as 1 (true), you must create a mechanism to attach
// the character to a row in the Accounts table before they will be able to login. Setting it to 0 (false)
// allows characters to login immediately after being created.
require_reg: 1

// Metadata files to send to the client upon login. 
// These files cache various bits of game information on the client, such as the item stats that
// are visible when right clicking on an item, and are only sent during login.
//
// IMPORTANT:
// These files are stored in the `meta` directory and  must be generated by running the `metan` command
// everytime new items are added to the database.
meta: RidableAnimals
meta: CharicInfo0
meta: CharicInfo1
meta: ItemInfo0
meta: ItemInfo1

// Map Server Configuration

// Listen Address
// Public IP for the map server that the client will connect to. Must be open to the public if you
// want non-local clients to connect. The client initial connects to the login server and after auth, the login server
// forwards this IP/Port to the client to directly connect. Note- The map server binds to 0.0.0.0, so this is just an
// address that the client can access - it does not control which interface to bind to.
map_ip: 192.168.1.68
map_port: 2001

// Map Server ID
// Currently, you can scale out the server by running multiple map servers, having each one only running a subset of the maps,
// and distribute the load across multiple machines. For each map server, you will need to create a new map.conf file and assign
// it a unique server_id. The database column `MapServer` dictates which map server owns which map.
//
// NOTE: Switching between map servers is a disruptive process to the client, takes several seconds, and is not well-tested so it
// is not currently recommended.
server_id: 0

// Town Names
// These are used to display the name of the character nation on the Heros list (CTRL+W) in the client. The order is important and
// the index must match the `ChaNation` column in the `Character` database table (they are 0 indexed). These DO NOT influence the
// world map portals.
town: Town1
town: Town2
town: Town3
town: Town4
town: Town5
town: Town6

// Save Time (Unused)
// Originally was used to setup a timer for commiting character data to the database. Currently is unused, but not sure what
// has replaced it.
// TODO: Figure out what has replaced it and remove this option
save_time: 60


// XP Rate & Drop Rate (Unused)
// TODO: Figure out if anything replaced this and remove
xprate: 10
droprate: 1